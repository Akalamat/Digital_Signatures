import os
import tkinter as tk
from tkinter import filedialog, messagebox
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.backends import default_backend

# Load the public key
with open('public_key.pem', 'rb') as f:
    public_pem = f.read()
    public_key = serialization.load_pem_public_key(
        public_pem,
        backend=default_backend()
    )

def verify_files(directory):
    results = []
    for filename in os.listdir(directory):
        file_path = os.path.join(directory, filename)
        
        if not os.path.isfile(file_path):
            continue

        with open(file_path, 'rb') as f:
            file_content = f.read()

        try:
            content, signature = file_content.split(b'\n---SIGNATURE---\n')
        except ValueError:
            results.append(f"       - File {filename} does not contain a digital signature üòÆ")
            continue

        try:
            public_key.verify(
                signature,
                content,
                padding.PSS(
                    mgf=padding.MGF1(hashes.SHA256()),
                    salt_length=padding.PSS.MAX_LENGTH
                ),
                hashes.SHA256()
            )
            results.append(f"       - File {filename} verified successfully ‚òª")
        except Exception as e:
            results.append(f"       - File {filename} verification failed üôÅ {e}")
    return results

def read_binary_signature(file_path):
    with open(file_path, 'rb') as f:
        content = f.read()
        signature_index = content.find(b'\n---SIGNATURE---\n')
        if signature_index != -1:
            signature = content[signature_index + len(b'\n---SIGNATURE---\n'):]
            return signature
        return None

def select_directory():
    directory = filedialog.askdirectory()
    if directory:
        results = verify_files(directory)
        result_text.delete(1.0, tk.END)
        for result in results:
            result_text.insert(tk.END, result + "\n", "big_font")

def select_file():
    file_path = filedialog.askopenfilename()
    if file_path:
        signature = read_binary_signature(file_path)
        result_text.delete(1.0, tk.END)
        if signature:
            result_text.insert(tk.END, f"Signature in file {os.path.basename(file_path)}: {signature.hex()}\n", "big_font")
        else:
            result_text.insert(tk.END, f"No signature found in file {os.path.basename(file_path)}\n", "big_font")

# Create the main application window
root = tk.Tk()
root.title("File Verification")

# Button to select a directory for verification
select_button = tk.Button(root, text="Select Directory", command=select_directory)
select_button.pack(pady=10)

# Button to select a file for reading the signature
read_signature_button = tk.Button(root, text="Read Signature from File", command=select_file)
read_signature_button.pack(pady=10)

# Text widget to display results
result_text = tk.Text(root, height=35, width=120)
result_text.pack(pady=10)

# Configure large font
result_text.tag_configure("big_font", font=("Helvetica", 16))

# Run the application
root.mainloop()
