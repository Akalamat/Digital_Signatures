import os
import tkinter as tk
from tkinter import filedialog, messagebox
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.backends import default_backend

# Generate RSA keys if they do not exist
if not os.path.exists('private_key.pem') or not os.path.exists('public_key.pem'):
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    public_key = private_key.public_key()

    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    public_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )

    with open('private_key.pem', 'wb') as f:
        f.write(private_pem)

    with open('public_key.pem', 'wb') as f:
        f.write(public_pem)
else:
    with open('private_key.pem', 'rb') as f:
        private_pem = f.read()
        private_key = serialization.load_pem_private_key(
            private_pem,
            password=None,
            backend=default_backend()
        )

    with open('public_key.pem', 'rb') as f:
        public_pem = f.read()
        public_key = serialization.load_pem_public_key(
            public_pem,
            backend=default_backend()
        )

def sign_files(directory):
    results = []
    for filename in os.listdir(directory):
        file_path = os.path.join(directory, filename)
        
        if not os.path.isfile(file_path):
            continue

        with open(file_path, 'rb') as f:
            file_content = f.read()

        # Sign the file
        signature = private_key.sign(
            file_content,
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            hashes.SHA256()
        )

        # Write the content and signature back to the file
        with open(file_path, 'wb') as f:
            f.write(file_content + b'\n' + b'---SIGNATURE---\n' + signature)

        results.append(f"       - Signed file: {filename}, Signature: {signature.hex()}")
    return results

def select_directory():
    directory = filedialog.askdirectory()
    if directory:
        results = sign_files(directory)
        result_text.delete(1.0, tk.END)
        for result in results:
            result_text.insert(tk.END, result + "\n", "big_font")

# Create the main application window
root = tk.Tk()
root.title("File Signing")

# Create a button to select a directory
select_button = tk.Button(root, text="Select Directory", command=select_directory)
select_button.pack(pady=10)

# Create a text widget to display results
result_text = tk.Text(root, height=35, width=100)
result_text.pack(pady=10)

# Configure large font
result_text.tag_configure("big_font", font=("Helvetica", 16))

# Run the application
root.mainloop()
